generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model act {
  id                                           Int           @id(map: "act_pk") @unique(map: "act_id_idx") @default(autoincrement())
  type                                         Int?
  act_number                                   String?       @db.VarChar
  act_date                                     DateTime?     @db.Date
  file_id                                      Int?
  act_type                                     act_type?     @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "act_fk")
  files                                        files?        @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "act_fk_1")
  appointment_appointment_act_return_idToact   appointment[] @relation("appointment_act_return_idToact")
  appointment_appointment_act_transfer_idToact appointment[] @relation("appointment_act_transfer_idToact")
}

model act_type {
  id        Int     @id(map: "act_type_pk") @unique(map: "act_type_id_idx") @default(autoincrement())
  type_name String? @db.VarChar
  act       act[]
}

model appointment {
  id                                   Int              @id(map: "appointment_pk") @unique(map: "appointment_id_idx") @default(autoincrement())
  patient_id                           Int
  doctor_id                            Int
  act_transfer_id                      Int?
  act_return_id                        Int?
  ap_date                              DateTime?        @db.Date
  finished                             String?          @db.VarChar
  sp_district_id                       Int?
  device_id                            Int?
  contract_id                          Int?
  act_appointment_act_return_idToact   act?             @relation("appointment_act_return_idToact", fields: [act_return_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_act_return_fk")
  act_appointment_act_transfer_idToact act?             @relation("appointment_act_transfer_idToact", fields: [act_transfer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_act_transfer_fk")
  contract                             contract?        @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_contract_fk")
  doctor                               doctor           @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_doctor_fk")
  device                               device?          @relation(fields: [device_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_fk")
  patient                              patient          @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "appointment_patient_fk")
  monitoring_ton                       monitoring_ton[]
}

model contract {
  id              Int           @id(map: "contract_pk") @unique(map: "contract_id_idx") @default(autoincrement())
  contract_number String?       @db.VarChar
  contract_date   DateTime?     @db.Date
  is_del          String?       @db.VarChar
  file_id         Int?
  appointment     appointment[]
  files           files?        @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "contract_fk")
}

model device {
  id            Int           @id(map: "device_pk") @unique(map: "device_id_idx") @default(autoincrement())
  serial_number String?       @db.VarChar
  model_id      Int?
  bluetoth_id   String?       @db.VarChar
  name          String?       @db.VarChar
  appointment   appointment[]
  model         model?        @relation(fields: [model_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "device_fk")
}

model doctor {
  id                          Int                           @id(map: "doctor_pk") @unique(map: "doctor_id_idx") @default(autoincrement())
  tabel_num                   String?                       @db.VarChar
  surname                     String?                       @db.VarChar
  name                        String?                       @db.VarChar
  patronomic_name             String?                       @db.VarChar
  phone                       String?                       @db.VarChar
  email                       String?                       @db.VarChar
  birth_date                  DateTime?                     @db.Date
  med_post_id                 Int?
  full_name                   String?                       @db.VarChar
  gender_id                   Int?
  appointment                 appointment[]
  gender                      gender?                       @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "doctor_fk")
  med_post                    med_post?                     @relation(fields: [med_post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "doctor_fk_1")
  uirs_users_patients_doctors uirs_users_patients_doctors[]
}

model gender {
  id          Int       @id(map: "gender_pk") @unique(map: "gender_id_idx") @default(autoincrement())
  gender_name String?   @db.VarChar
  doctor      doctor[]
  patient     patient[]
}

model med_post {
  id             Int          @id(map: "med_post_pk") @unique(map: "med_post_id_idx") @default(autoincrement())
  med_post_name  String?      @db.VarChar
  parent_id      Int?
  medical_org_id Int?
  doctor         doctor[]
  medical_org    medical_org? @relation(fields: [medical_org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "med_post_fk")
  med_post       med_post?    @relation("med_postTomed_post", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "med_post_fk_1")
  other_med_post med_post[]   @relation("med_postTomed_post")
}

model medical_org {
  id                     Int                    @id(map: "medical_org_pk") @unique(map: "medical_org_id_idx") @default(autoincrement())
  medical_org_name       String?                @db.VarChar
  parent_id              Int?
  medical_org_name_small String?                @db.VarChar
  region                 String?                @db.VarChar
  med_post               med_post[]
  medical_org            medical_org?           @relation("medical_orgTomedical_org", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "medical_org_fk")
  other_medical_org      medical_org[]          @relation("medical_orgTomedical_org")
  medical_org_district   medical_org_district[]
}

model medical_org_district {
  id             Int          @id(map: "medical_org_district_pk") @unique(map: "medical_org_district_id_idx") @default(autoincrement())
  medical_org_id Int?
  sp_district_id Int?
  medical_org    medical_org? @relation(fields: [medical_org_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "medical_org_district_fk")
  sp_district    sp_district? @relation(fields: [sp_district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "medical_org_district_fk_1")
}

model mkb10 {
  id                Int                 @id(map: "mkb10_pk") @unique(map: "mkb10_id_idx") @default(autoincrement())
  mkb_name          String?             @db.VarChar
  patient_anamnesis patient_anamnesis[]
}

model model {
  id         Int      @id(map: "model_pk") @default(autoincrement())
  model_name String?  @db.VarChar
  device     device[]

  @@index([id])
}

model monitoring_ton {
  id             Int         @id(map: "monitoring_ton_pk") @unique(map: "monitoring_ton_id_idx") @default(autoincrement())
  dt_dimension   DateTime?   @default(now()) @db.Timestamp(6)
  upper_pressure Int?
  lower_pressure Int?
  heart_rate     Int?
  appointment_id Int
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "monitoring_ton_fk")
}

model patient {
  id                                                      Int                           @id(map: "patient_pk") @unique(map: "patient_id_idx") @default(autoincrement())
  surname                                                 String?                       @db.VarChar
  name                                                    String?                       @db.VarChar
  patronomic_name                                         String?                       @db.VarChar
  birth_date                                              DateTime?                     @db.Date
  phone                                                   String?                       @db.VarChar
  email                                                   String?                       @db.VarChar
  snils                                                   String?                       @db.VarChar
  polis                                                   String?                       @db.VarChar
  full_name                                               String?                       @db.VarChar
  gender_id                                               Int
  sp_district_id                                          Int?
  address                                                 String?                       @db.VarChar
  doc_id                                                  Int?
  appointment                                             appointment[]
  sp_district                                             sp_district?                  @relation(fields: [sp_district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_district_fk")
  patient_documents_patient_doc_idTopatient_documents     patient_documents?            @relation("patient_doc_idTopatient_documents", fields: [doc_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_fk")
  gender                                                  gender                        @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_gender_fk")
  patient_anamnesis                                       patient_anamnesis[]
  patient_documents_patient_documents_patient_idTopatient patient_documents[]           @relation("patient_documents_patient_idTopatient")
  uirs_users_patients_doctors                             uirs_users_patients_doctors[]
}

model patient_anamnesis {
  id         Int      @id(map: "patient_anamnesis_pk") @unique(map: "patient_anamnesis_id_idx") @default(autoincrement())
  patient_id Int?
  mkb10_id   Int?
  patient    patient? @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_anamnesis_fk")
  mkb10      mkb10?   @relation(fields: [mkb10_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_anamnesis_fk_1")
}

model patient_documents {
  id                                            Int       @id(map: "patient_documents_pk") @unique(map: "patient_documents_id_idx") @default(autoincrement())
  document_name                                 String?   @db.VarChar
  document_type_id                              Int?
  document_number                               String?   @db.VarChar
  document_date                                 DateTime? @db.Date
  given_by                                      String?   @db.VarChar
  patient_id                                    Int?
  representative_surname                        String?   @db.VarChar
  representative_name                           String?   @db.VarChar
  representative_patronomic_name                String?   @db.VarChar
  representative_birthday                       DateTime? @db.Date
  representative_snils                          String?   @db.VarChar
  representative_polis                          String?   @db.VarChar
  representative_phone                          String?   @db.VarChar
  representative_address_fact                   String?   @db.VarChar
  representative_factor                         Int?
  patient_patient_doc_idTopatient_documents     patient[] @relation("patient_doc_idTopatient_documents")
  patient_patient_documents_patient_idTopatient patient?  @relation("patient_documents_patient_idTopatient", fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "patient_documents_fk")
}

model roles {
  id         Int          @id(map: "roles_pk") @unique(map: "roles_id_idx") @default(autoincrement())
  role       String?      @db.VarChar
  uirs_users uirs_users[]
}

model sp_district {
  id                   Int                    @id(map: "sp_district_pk") @unique(map: "sp_district_id_idx") @default(autoincrement())
  name                 String?                @db.VarChar
  medical_org_district medical_org_district[]
  patient              patient[]
}

model uirs_users {
  id                                                                                                 Int                           @id(map: "uirs_users_pk") @unique(map: "uirs_users_id_idx") @default(autoincrement())
  role_id                                                                                            Int?
  uirs_users_db_id                                                                                   Int?                          @unique(map: "uirs_users_uirs_users_db_id_idx")
  uirs_users_patients_doctors_id                                                                     Int?
  roles                                                                                              roles?                        @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_fk")
  uirs_users_db_uirs_users_uirs_users_db_idTouirs_users_db                                           uirs_users_db?                @relation("uirs_users_uirs_users_db_idTouirs_users_db", fields: [uirs_users_db_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "uirs_users_fk_1")
  uirs_users_patients_doctors_uirs_users_uirs_users_patients_doctors_idTouirs_users_patients_doctors uirs_users_patients_doctors?  @relation("uirs_users_uirs_users_patients_doctors_idTouirs_users_patients_doctors", fields: [uirs_users_patients_doctors_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_fk_2")
  uirs_users_db_uirs_users_db_uirs_users_idTouirs_users                                              uirs_users_db[]               @relation("uirs_users_db_uirs_users_idTouirs_users")
  uirs_users_patients_doctors_uirs_users_patients_doctors_uirs_users_idTouirs_users                  uirs_users_patients_doctors[] @relation("uirs_users_patients_doctors_uirs_users_idTouirs_users")
}

model uirs_users_db {
  id                                                                Int                   @id(map: "uirs_users_db_pk") @unique(map: "uirs_users_db_id_idx") @default(autoincrement())
  login                                                             String?               @db.VarChar
  password                                                          String?               @db.VarChar
  token_id                                                          Int?
  uirs_users_id                                                     Int?
  uirs_users_uirs_users_uirs_users_db_idTouirs_users_db             uirs_users?           @relation("uirs_users_uirs_users_db_idTouirs_users_db")
  uirs_users_db_tokens_uirs_users_db_token_idTouirs_users_db_tokens uirs_users_db_tokens? @relation("uirs_users_db_token_idTouirs_users_db_tokens", fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_db_fk")
  uirs_users_uirs_users_db_uirs_users_idTouirs_users                uirs_users?           @relation("uirs_users_db_uirs_users_idTouirs_users", fields: [uirs_users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "uirs_users_db_fk_1")
  uirs_users_db_tokens_uirs_users_db_tokens_useridTouirs_users_db   uirs_users_db_tokens? @relation("uirs_users_db_tokens_useridTouirs_users_db")
}

model uirs_users_db_tokens {
  id                                                         Int             @id(map: "uirs_users_db_tekens_pk") @unique(map: "uirs_users_db_tekens_id_idx") @default(autoincrement())
  refreshtoken                                               String?         @unique(map: "uirs_users_db_tokens_refreshtoken_idx") @db.VarChar
  userid                                                     Int?            @unique(map: "uirs_users_db_tokens_userid_idx")
  uirs_users_db_uirs_users_db_token_idTouirs_users_db_tokens uirs_users_db[] @relation("uirs_users_db_token_idTouirs_users_db_tokens")
  uirs_users_db_uirs_users_db_tokens_useridTouirs_users_db   uirs_users_db?  @relation("uirs_users_db_tokens_useridTouirs_users_db", fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_db_tokens_fk")
}

model uirs_users_patients_doctors {
  id                                                                                Int          @id(map: "uirs_users_patients_doctors_pk") @unique(map: "uirs_users_patients_doctors_id_idx") @default(autoincrement())
  patient_id                                                                        Int?
  doctor_id                                                                         Int?
  uirs_users_id                                                                     Int?
  uirs_users_uirs_users_uirs_users_patients_doctors_idTouirs_users_patients_doctors uirs_users[] @relation("uirs_users_uirs_users_patients_doctors_idTouirs_users_patients_doctors")
  patient                                                                           patient?     @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_patients_doctors_fk")
  doctor                                                                            doctor?      @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uirs_users_patients_doctors_fk_1")
  uirs_users_uirs_users_patients_doctors_uirs_users_idTouirs_users                  uirs_users?  @relation("uirs_users_patients_doctors_uirs_users_idTouirs_users", fields: [uirs_users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "uirs_users_patients_doctors_fk_2")
}

model files {
  id        Int        @id(map: "files_pk") @unique(map: "files_id_idx") @default(autoincrement())
  file_name String     @db.VarChar
  path      String     @db.VarChar
  act       act[]
  contract  contract[]
}
